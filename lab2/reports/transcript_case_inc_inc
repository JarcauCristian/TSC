# 1
# Model Technology ModelSim Microsemi vlog 10.5c Compiler 2016.07 Jul 21 2016
# Start time: 09:33:10 on Mar 27,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 09:33:10 on Mar 27,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST_NAME=case_inc_inc -GWR_NR=10 -GRD_NR=10 -GWRITE_ORDER=0 -GREAD_ORDER=0 
# Start time: 09:33:10 on Mar 27,2024
# //  ModelSim Microsemi 10.5c Jul 21 2016
# //
# //  Copyright 1991-2016 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  ModelSim Microsemi and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU DON'T  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Randomized Transaction Display for Position: 0
# operand_a: -12
# operand_b: 7
# opcode: 1
# Time: 36
# 
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Randomized Transaction Display for Position: 1
# operand_a: -9
# operand_b: 1
# opcode: 0
# Time: 46
# 
# Writing to register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Randomized Transaction Display for Position: 2
# operand_a: -15
# operand_b: 8
# opcode: 7
# Time: 56
# 
# Writing to register location 2: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# 
# Randomized Transaction Display for Position: 3
# operand_a: -8
# operand_b: 7
# opcode: 5
# Time: 66
# 
# Writing to register location 3: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# 
# Randomized Transaction Display for Position: 4
# operand_a: -9
# operand_b: 5
# opcode: 3
# Time: 76
# 
# Writing to register location 4: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# 
# Randomized Transaction Display for Position: 5
# operand_a: 5
# operand_b: 3
# opcode: 4
# Time: 86
# 
# Writing to register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
# Randomized Transaction Display for Position: 6
# operand_a: 3
# operand_b: 12
# opcode: 3
# Time: 96
# 
# Writing to register location 6: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# 
# Randomized Transaction Display for Position: 7
# operand_a: 12
# operand_b: 3
# opcode: 6
# Time: 106
# 
# Writing to register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
# 
# Randomized Transaction Display for Position: 8
# operand_a: 3
# operand_b: 14
# opcode: 1
# Time: 116
# 
# Writing to register location 8: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
# 
# Randomized Transaction Display for Position: 9
# operand_a: -2
# operand_b: 9
# opcode: 1
# Time: 126
# 
# Writing to register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
#   result    = -12
#   read_pointer = 0
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 0
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Calculated Test Result: -12
# 
#  instruction_word.res = -12
# 
# Results are matching!
# 
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
#   result    = 0
#   read_pointer = 1
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 1
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Calculated Test Result: 0
# 
#  instruction_word.res = 0
# 
# Results are matching!
# 
# Read from register location 2: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
#   result    = -7
#   read_pointer = 2
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 2
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# 
# Calculated Test Result: -7
# 
#  instruction_word.res = -7
# 
# Results are matching!
# 
# Read from register location 3: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
#   result    = -56
#   read_pointer = 3
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 3
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# 
# Calculated Test Result: -56
# 
#  instruction_word.res = -56
# 
# Results are matching!
# 
# Read from register location 4: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
#   result    = -4
#   read_pointer = 4
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 4
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# 
# Calculated Test Result: -4
# 
#  instruction_word.res = -4
# 
# Results are matching!
# 
# Read from register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
#   result    = 2
#   read_pointer = 5
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 5
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
# Calculated Test Result: 2
# 
#  instruction_word.res = 2
# 
# Results are matching!
# 
# Read from register location 6: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
#   result    = 15
#   read_pointer = 6
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 6
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# 
# Calculated Test Result: 15
# 
#  instruction_word.res = 15
# 
# Results are matching!
# 
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
#   result    = 4
#   read_pointer = 7
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 7
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
# 
# Calculated Test Result: 4
# 
#  instruction_word.res = 4
# 
# Results are matching!
# 
# Read from register location 8: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
#   result    = 3
#   read_pointer = 8
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 8
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
# 
# Calculated Test Result: 3
# 
#  instruction_word.res = 3
# 
# Results are matching!
# 
# Read from register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
#   result    = -2
#   read_pointer = 9
# 
# What was stored in test matches what came from DUT. Starting cheking if results are matching.
# 
# Check Result:
#   read_pointer = 9
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
# Calculated Test Result: -2
# 
#  instruction_word.res = -2
# 
# Results are matching!
# 
# 
# Number of tests passed out of all tests for: 10/10
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU DON'T  ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(80)
#    Time: 246 ns  Iteration: 1  Instance: /top/test
# End time: 09:33:10 on Mar 27,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
